// EmulatorView.cpp

// Copyright (C) 2012  Miroslav Sustek <sus107@vsb.cz>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// -*- C++ -*- generated by wxGlade HG on Tue Jan 10 21:38:21 2012

#include "EmulatorView.h"

#include "../Machine.h"
#include "../Debugger.h"

#include "../TapeRecorder.h"
#include "../Keyboard.h"

// begin wxGlade: ::extracode

// end wxGlade


EmulatorView::EmulatorView(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
	wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE & ~wxRESIZE_BORDER)
{
	// begin wxGlade: EmulatorView::EmulatorView
	menubar = new wxMenuBar();
	wxMenu* wxglade_tmp_menu_1 = new wxMenu();
	wxglade_tmp_menu_1->Append(9, _("Open..."), wxEmptyString, wxITEM_NORMAL);
	menubar->Append(wxglade_tmp_menu_1, _("File"));
	wxMenu* wxglade_tmp_menu_2 = new wxMenu();
	wxglade_tmp_menu_2->Append(1, _("Start"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(2, _("Stop"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(7, _("Reset"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(8, _("Debug..."), wxEmptyString, wxITEM_NORMAL);
	menubar->Append(wxglade_tmp_menu_2, _("Machine"));
	wxMenu* wxglade_tmp_menu_3 = new wxMenu();
	wxglade_tmp_menu_3->Append(3, _("Open..."), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_3->Append(4, _("Play"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_3->Append(5, _("Stop"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_3->Append(6, _("Rewind"), wxEmptyString, wxITEM_NORMAL);
	menubar->Append(wxglade_tmp_menu_3, _("Tape"));
	SetMenuBar(menubar);
	panel = new wxPanel(this, wxID_ANY);

	set_properties();
	do_layout();
	// end wxGlade

	panel->Connect(wxEVT_PAINT, wxPaintEventHandler(EmulatorView::OnPaint), NULL, this);
	//Connect(wxEVT_PAINT, wxPaintEventHandler(Emulator::OnPaint));
	panel->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(EmulatorView::OnKeyDown), NULL, this);
	panel->Connect(wxEVT_KEY_UP, wxKeyEventHandler(EmulatorView::OnKeyUp), NULL, this);

	emulator = NULL;
}

void EmulatorView::init() {
	emulator = new Emulator();
	emulator->init();

	timer = new wxTimer(this, wxID_ANY);
	Connect(timer->GetId(), wxEVT_TIMER, wxTimerEventHandler(EmulatorView::OnTimer));
	stopWatch = new wxStopWatch();
	stopWatch->Pause();

#ifdef wxUSE_JOYSTICK
	joystick = new wxJoystick();
	joystickTimer = new wxTimer(this, 502);
	Connect(joystickTimer->GetId(), wxEVT_TIMER, wxTimerEventHandler(EmulatorView::OnJoystickTimer));
#endif

	keyboardMapping['A'] = KEY_A;
	keyboardMapping['B'] = KEY_B;
	keyboardMapping['C'] = KEY_C;
	keyboardMapping['D'] = KEY_D;
	keyboardMapping['E'] = KEY_E;
	keyboardMapping['F'] = KEY_F;
	keyboardMapping['G'] = KEY_G;
	keyboardMapping['H'] = KEY_H;
	keyboardMapping['I'] = KEY_I;
	keyboardMapping['J'] = KEY_J;
	keyboardMapping['K'] = KEY_K;
	keyboardMapping['L'] = KEY_L;
	keyboardMapping['M'] = KEY_M;
	keyboardMapping['N'] = KEY_N;
	keyboardMapping['O'] = KEY_O;
	keyboardMapping['P'] = KEY_P;
	keyboardMapping['Q'] = KEY_Q;
	keyboardMapping['R'] = KEY_R;
	keyboardMapping['S'] = KEY_S;
	keyboardMapping['T'] = KEY_T;
	keyboardMapping['U'] = KEY_U;
	keyboardMapping['V'] = KEY_V;
	keyboardMapping['W'] = KEY_W;
	keyboardMapping['X'] = KEY_X;
	keyboardMapping['Y'] = KEY_Y;
	keyboardMapping['Z'] = KEY_Z;
	keyboardMapping[WXK_RETURN] = KEY_ENTER;
	keyboardMapping[WXK_SPACE] = KEY_SPACE;
	keyboardMapping[WXK_NUMPAD0] = KEY_0;
	keyboardMapping[WXK_NUMPAD1] = KEY_1;
	keyboardMapping[WXK_NUMPAD2] = KEY_2;
	keyboardMapping[WXK_NUMPAD3] = KEY_3;
	keyboardMapping[WXK_NUMPAD4] = KEY_4;
	keyboardMapping[WXK_NUMPAD5] = KEY_5;
	keyboardMapping[WXK_NUMPAD6] = KEY_6;
	keyboardMapping[WXK_NUMPAD7] = KEY_7;
	keyboardMapping[WXK_NUMPAD8] = KEY_8;
	keyboardMapping[WXK_NUMPAD9] = KEY_9;
	keyboardMapping[WXK_SHIFT] = KEY_CAPS_SHIFT;
	keyboardMapping[WXK_CONTROL] = KEY_SYMBOL_SHIFT;

	// run the emulation
	start();
}

void EmulatorView::start()
{
	if (!emulator->isRunning()) {
		emulator->start();
		timer->Start(20);

#ifdef wxUSE_JOYSTICK
		joystickTimer->Start(10);
#endif
	}
}

void EmulatorView::stop()
{
	if (emulator->isRunning()) {
		emulator->stop();

		timer->Stop();

#ifdef wxUSE_JOYSTICK
		joystickTimer->Stop();
#endif
	}
}

BEGIN_EVENT_TABLE(EmulatorView, wxFrame)
	// begin wxGlade: EmulatorView::event_table
	EVT_MENU(9, EmulatorView::OnFileOpen)
	EVT_MENU(1, EmulatorView::OnMachineStart)
	EVT_MENU(2, EmulatorView::OnMachineStop)
	EVT_MENU(7, EmulatorView::OnMachineReset)
	EVT_MENU(8, EmulatorView::OnMachineDebug)
	EVT_MENU(3, EmulatorView::OnTapeOpen)
	EVT_MENU(4, EmulatorView::OnTapePlay)
	EVT_MENU(5, EmulatorView::OnTapeStop)
	EVT_MENU(6, EmulatorView::OnTapeRewind)
	// end wxGlade
END_EVENT_TABLE();

void EmulatorView::OnFileOpen(wxCommandEvent & event)
{
	wxFileDialog* openFileDialog = new wxFileDialog(this, _("Open file"),
			wxT(""), wxT(""),
			wxT("Snapshot files (*.z80;*.sna)|*.z80;*.sna|All files (*.*)|*.*"),
			wxFD_OPEN|wxFD_FILE_MUST_EXIST, wxDefaultPosition);

	if (openFileDialog->ShowModal() == wxID_OK) {
		stop();
		emulator->getMachine()->loadSnapshot(openFileDialog->GetPath().mb_str().data());
		start();
	}
}

void EmulatorView::OnMachineStart(wxCommandEvent &event)
{
	start();
}

void EmulatorView::OnMachineStop(wxCommandEvent &event)
{
	stop();
}

void EmulatorView::OnMachineReset(wxCommandEvent & event)
{
	//cpu->setNmiLineState(nmi = !nmi);
	//printf("%d\n", nmi);
	emulator->getMachine()->getCpu()->reset();
}

void EmulatorView::OnMachineDebug(wxCommandEvent & event)
{
	DebuggerView *debuggerView = new DebuggerView(this, wxID_ANY, wxEmptyString);
	debuggerView->attach(emulator, emulator->getDebugger());

	debuggerView->Show(true);
	debuggerView->uiUpdate();
}

void EmulatorView::OnTapeOpen(wxCommandEvent & event)
{
	wxFileDialog* openFileDialog = new wxFileDialog(this, _("Open file"),
			wxT(""), wxT(""),
			wxT("Tape files (*.tap;*.tzx)|*.tap;*.tzx|All files (*.*)|*.*"),
			wxFD_OPEN|wxFD_FILE_MUST_EXIST, wxDefaultPosition);

	if (openFileDialog->ShowModal() == wxID_OK) {
		emulator->getTapeRecorder()->load(openFileDialog->GetPath().mb_str().data());
	}
}

void EmulatorView::OnTapePlay(wxCommandEvent & event)
{
	emulator->getTapeRecorder()->play();
}

void EmulatorView::OnTapeStop(wxCommandEvent & event)
{
	emulator->getTapeRecorder()->stop();
}

void EmulatorView::OnTapeRewind(wxCommandEvent & event)
{
	emulator->getTapeRecorder()->rewind();
}

void EmulatorView::OnTimer(wxTimerEvent &event)
{
	// render screen
	panel->Refresh();
}

#ifdef wxUSE_JOYSTICK
void EmulatorView::OnJoystickTimer(wxTimerEvent &event)
{
	wxPoint pos = joystick->GetPosition();

	int rangeX = joystick->GetXMax() - joystick->GetXMin();
	int centerX = joystick->GetXMin() + rangeX / 2;
	int rangeY = joystick->GetYMax() - joystick->GetYMin();
	int centerY = joystick->GetYMin() + rangeY / 2;

	// left key
	if (pos.x < centerX - rangeX / 4) {
		emulator->getJoystick()->keyPressed(JOY_LEFT);
	} else {
		emulator->getJoystick()->keyReleased(JOY_LEFT);
	}

	// right key
	if (pos.x > centerX + rangeX / 4) {
		emulator->getJoystick()->keyPressed(JOY_RIGHT);
	} else {
		emulator->getJoystick()->keyReleased(JOY_RIGHT);
	}

	// up key
	if (pos.y < centerY - rangeY / 4) {
		emulator->getJoystick()->keyPressed(JOY_UP);
	} else {
		emulator->getJoystick()->keyReleased(JOY_UP);
	}

	// down key
	if (pos.y > centerY + rangeY / 4) {
		emulator->getJoystick()->keyPressed(JOY_DOWN);
	} else {
		emulator->getJoystick()->keyReleased(JOY_DOWN);
	}

	// fire key
	if (joystick->GetButtonState()) {
		emulator->getJoystick()->keyPressed(JOY_FIRE);
	} else {
		emulator->getJoystick()->keyReleased(JOY_FIRE);
	}
}
#endif

void EmulatorView::OnPaint(wxPaintEvent &event)
{
	//printf("paint\n");
	wxImage img(352, 288);
	//wxPaintDC dc(this);
	wxPaintDC dc2(panel);

	uint32_t *buffer;
	buffer = new uint32_t[352*288];

	if (emulator != NULL) {
		emulator->renderScreen(buffer);
	}

	for (int y = 0; y < 288; y++) {
		for (int x = 0; x < 352; x++) {
			img.SetRGB(x, y,
					(buffer[y*352 + x] & 0xff0000) >> 16,
					(buffer[y*352 + x] & 0x00ff00) >> 8,
					(buffer[y*352 + x] & 0x0000ff));
		}
	}

	//dc.DrawBitmap(img, wxPoint(0,0));
	dc2.DrawBitmap(img, wxPoint(0,0));
	delete buffer;
}

void EmulatorView::OnKeyDown(wxKeyEvent &event) {
	int keyCode = event.GetKeyCode();
	std::map<int, KeyboardKeys>::iterator it = keyboardMapping.find(keyCode);
	if (it != keyboardMapping.end()) {
		emulator->getKeyboard()->keyPressed(it->second);
	}
}

void EmulatorView::OnKeyUp(wxKeyEvent &event) {
	int keyCode = event.GetKeyCode();
	std::map<int, KeyboardKeys>::iterator it = keyboardMapping.find(keyCode);
	if (it != keyboardMapping.end()) {
		emulator->getKeyboard()->keyReleased(it->second);
	}
}

/*void EmulatorView::OnJoystickEvent(wxJoystickEvent& event) {
	printf("OnJoystickEvent\n");

	printf("%d\n", joystick->GetVPosition());

	if (event.ButtonDown()) {
		printf("button down\n");
		emulator->getJoystick()->keyPressed(JOY_FIRE);
	} else if (event.ButtonUp()) {
		emulator->getJoystick()->keyReleased(JOY_FIRE);
	}
}*/

// wxGlade: add EmulatorView event handlers


void EmulatorView::set_properties()
{
	// begin wxGlade: EmulatorView::set_properties
	SetTitle(_("Emulator"));
	SetSize(wxSize(352, 310));
	SetFocus();
	panel->SetMinSize(wxSize(352, 288));
	panel->SetFocus();
	// end wxGlade
}


void EmulatorView::do_layout()
{
	// begin wxGlade: EmulatorView::do_layout
	wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
	sizer->Add(panel, 1, wxEXPAND, 0);
	SetSizer(sizer);
	Layout();
	// end wxGlade
}



