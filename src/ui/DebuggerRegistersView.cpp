// DebuggerRegistersView.cpp

// Copyright (C) 2012  Miroslav Sustek <sus107@vsb.cz>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// -*- C++ -*- generated by wxGlade HG on Fri Feb  3 02:49:17 2012

#include "DebuggerRegistersView.h"

// begin wxGlade: ::extracode

// end wxGlade


DebuggerRegistersView::DebuggerRegistersView(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
	wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
	// begin wxGlade: DebuggerRegistersView::DebuggerRegistersView
	label_af = new wxStaticText(this, wxID_ANY, _("AF"));
	reg_af = new wxTextCtrl(this, 101, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_bc = new wxStaticText(this, wxID_ANY, _("BC"));
	reg_bc = new wxTextCtrl(this, 102, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_de = new wxStaticText(this, wxID_ANY, _("DE"));
	reg_de = new wxTextCtrl(this, 103, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_hl = new wxStaticText(this, wxID_ANY, _("HL"));
	reg_hl = new wxTextCtrl(this, 104, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_pc = new wxStaticText(this, wxID_ANY, _("PC"));
	reg_pc = new wxTextCtrl(this, 109, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_sp = new wxStaticText(this, wxID_ANY, _("SP"));
	reg_sp = new wxTextCtrl(this, 110, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_i = new wxStaticText(this, wxID_ANY, _("I"));
	reg_i = new wxTextCtrl(this, 113, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_af2 = new wxStaticText(this, wxID_ANY, _("AF'"));
	reg_af2 = new wxTextCtrl(this, 105, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_bc2 = new wxStaticText(this, wxID_ANY, _("BC'"));
	reg_bc2 = new wxTextCtrl(this, 106, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_de2 = new wxStaticText(this, wxID_ANY, _("DE'"));
	reg_de2 = new wxTextCtrl(this, 107, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_hl2 = new wxStaticText(this, wxID_ANY, _("HL'"));
	reg_hl2 = new wxTextCtrl(this, 108, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_ix = new wxStaticText(this, wxID_ANY, _("IX"));
	reg_ix = new wxTextCtrl(this, 111, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_iy = new wxStaticText(this, wxID_ANY, _("IY"));
	reg_iy = new wxTextCtrl(this, 112, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
	label_r = new wxStaticText(this, wxID_ANY, _("R"));
	reg_r = new wxTextCtrl(this, 114, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);

	set_properties();
	do_layout();
	// end wxGlade

	debugger = NULL;
}

DebuggerRegistersView::~DebuggerRegistersView()
{
	if (debugger) {
		debugger->removeListener(this);
	}
}


BEGIN_EVENT_TABLE(DebuggerRegistersView, wxFrame)
	// begin wxGlade: DebuggerRegistersView::event_table
	EVT_TEXT_ENTER(101, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(102, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(103, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(104, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(109, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(110, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(113, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(105, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(106, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(107, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(108, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(111, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(112, DebuggerRegistersView::OnRegEnter)
	EVT_TEXT_ENTER(114, DebuggerRegistersView::OnRegEnter)
	// end wxGlade
END_EVENT_TABLE();


void DebuggerRegistersView::uiUpdate()
{
	wxString str;

	reg_af->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regAF)));
	reg_bc->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regBC)));
	reg_de->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regDE)));
	reg_hl->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regHL)));

	reg_af2->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regAF_)));
	reg_bc2->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regBC_)));
	reg_de2->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regDE_)));
	reg_hl2->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regHL_)));

	reg_pc->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regPC)));
	reg_sp->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regSP)));
	reg_ix->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regIX)));
	reg_iy->ChangeValue(wxString::Format(wxT("%04X"), debugger->getCpuRegister(regIY)));

	reg_i->ChangeValue(wxString::Format(wxT("%02X"), debugger->getCpuRegister(regI)));
	reg_r->ChangeValue(wxString::Format(wxT("%02X"), debugger->getCpuRegister(regR)));
}

void DebuggerRegistersView::emulatorEvent(EmulatorEvent event)
{
	if (event == EMULATOR_EVENT_REGISTERS_CHANGED ||
		event == EMULATOR_EVENT_EMULATION_STEP ||
		event == EMULATOR_EVENT_EMULATION_STOP)
	{
		uiUpdate();
	}
}

void DebuggerRegistersView::debuggerEvent(DebuggerEvent event)
{
	// nothing ?
}

void DebuggerRegistersView::attach(Emulator *emulator, Debugger *debugger)
{
    this->emulator = emulator;
    this->debugger = debugger;
    emulator->addListener(this);
    debugger->addListener(this);
}

void DebuggerRegistersView::OnRegEnter(wxCommandEvent &event)
{
	wxTextCtrl *textCtl = wxDynamicCast(event.GetEventObject(), wxTextCtrl);
	if (textCtl) {
		int val;
		if (sscanf(textCtl->GetValue().mb_str(), "%x", &val) == 1) {
			switch (event.GetId()) {
				case 101: debugger->setCpuRegister(regAF, val); break;
				case 102: debugger->setCpuRegister(regBC, val); break;
				case 103: debugger->setCpuRegister(regDE, val); break;
				case 104: debugger->setCpuRegister(regHL, val); break;
				case 105: debugger->setCpuRegister(regAF_, val); break;
				case 106: debugger->setCpuRegister(regBC_, val); break;
				case 107: debugger->setCpuRegister(regDE_, val); break;
				case 108: debugger->setCpuRegister(regHL_, val); break;
				case 109: debugger->setCpuRegister(regPC, val); break;
				case 110: debugger->setCpuRegister(regSP, val); break;
				case 111: debugger->setCpuRegister(regIX, val); break;
				case 112: debugger->setCpuRegister(regIY, val); break;
				case 113: debugger->setCpuRegister(regI, val); break;
				case 114: debugger->setCpuRegister(regR, val); break;
			}
		}
	}
}


// wxGlade: add DebuggerRegistersView event handlers


void DebuggerRegistersView::set_properties()
{
	// begin wxGlade: DebuggerRegistersView::set_properties
	SetTitle(_("Registers"));
	// end wxGlade
}

void DebuggerRegistersView::do_layout()
{
	// begin wxGlade: DebuggerRegistersView::do_layout
	wxBoxSizer* registers_columns = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* registers2 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_reg_r = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_iy = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_ix = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_hl2 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_de2 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_bc2 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_af2 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* registers1 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_reg_i = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_sp = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_pc = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_hl = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_de = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_bc = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_reg_af = new wxBoxSizer(wxHORIZONTAL);
	sizer_reg_af->Add(label_af, 1, wxALIGN_CENTER_VERTICAL, 0);
	sizer_reg_af->Add(reg_af, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_af, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_bc->Add(label_bc, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_bc->Add(reg_bc, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_bc, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_de->Add(label_de, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_de->Add(reg_de, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_de, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_hl->Add(label_hl, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_hl->Add(reg_hl, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_hl, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_pc->Add(label_pc, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_pc->Add(reg_pc, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_pc, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_sp->Add(label_sp, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_sp->Add(reg_sp, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_sp, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_i->Add(label_i, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_i->Add(reg_i, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers1->Add(sizer_reg_i, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	registers_columns->Add(registers1, 1, wxEXPAND, 0);
	sizer_reg_af2->Add(label_af2, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_af2->Add(reg_af2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_af2, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_bc2->Add(label_bc2, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_bc2->Add(reg_bc2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_bc2, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_de2->Add(label_de2, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_de2->Add(reg_de2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_de2, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_hl2->Add(label_hl2, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_hl2->Add(reg_hl2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_hl2, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_ix->Add(label_ix, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_ix->Add(reg_ix, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_ix, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_iy->Add(label_iy, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_iy->Add(reg_iy, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_iy, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	sizer_reg_r->Add(label_r, 1, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
	sizer_reg_r->Add(reg_r, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
	registers2->Add(sizer_reg_r, 1, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
	registers_columns->Add(registers2, 1, wxEXPAND, 0);
	SetSizer(registers_columns);
	registers_columns->Fit(this);
	Layout();
	// end wxGlade
}

