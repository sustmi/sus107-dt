// -*- C++ -*- generated by wxGlade HG on Tue Jan 10 21:38:21 2012

#include "Emulator.h"

#include "Machine.h"
#include "Debugger.h"

// begin wxGlade: ::extracode

// end wxGlade


Emulator::Emulator(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
	wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
	// begin wxGlade: Emulator::Emulator
	menubar = new wxMenuBar();
	wxMenu* wxglade_tmp_menu_1 = new wxMenu();
	wxglade_tmp_menu_1->Append(1, wxT("Start"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_1->Append(2, wxT("Stop"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_1->Append(7, wxT("Reset"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_1->Append(8, wxT("Debug"), wxEmptyString, wxITEM_NORMAL);
	menubar->Append(wxglade_tmp_menu_1, wxT("Machine"));
	wxMenu* wxglade_tmp_menu_2 = new wxMenu();
	wxglade_tmp_menu_2->Append(3, wxT("Open"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(4, wxT("Play"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(5, wxT("Stop"), wxEmptyString, wxITEM_NORMAL);
	wxglade_tmp_menu_2->Append(6, wxT("Rewind"), wxEmptyString, wxITEM_NORMAL);
	menubar->Append(wxglade_tmp_menu_2, wxT("Tape"));
	SetMenuBar(menubar);
	panel = new wxPanel(this, wxID_ANY);

	set_properties();
	do_layout();
	// end wxGlade

	Connect(wxEVT_TIMER, wxCommandEventHandler(Emulator::OnTimer));
	panel->Connect(wxEVT_PAINT, wxPaintEventHandler(Emulator::OnPaint), NULL, this);
	//Connect(wxEVT_PAINT, wxPaintEventHandler(Emulator::OnPaint));
	panel->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(Emulator::OnKeyDown), NULL, this);
	panel->Connect(wxEVT_KEY_UP, wxKeyEventHandler(Emulator::OnKeyUp), NULL, this);
}

void Emulator::init() {
	running = false;

	Memory *memory = new Memory();
	cpu = new Cpu();
	ula = new Ula();
	Ports *ports = new Ports();

	tapeRecorder = new TapeRecorder();
	keyboard = new Keyboard();

	machine = new Machine();
	machine->attach(memory, cpu, ula);

	memory->attach(machine);
	cpu->attach(ula, ports);
	ula->attach(machine, memory, cpu, tapeRecorder, keyboard);
	tapeRecorder->attach(machine);

	ports->connectDevice(ula);

	machine->loadSnapshot("manicminer.z80");
	machine->loadRom("48.rom");

	debugger = new Debugger();
	debugger->setEmulator(this);

	tapeRecorder->load("manicminer.tzx");
	//tapeRecorder->play();

	timer = new wxTimer(this, 1);
	stopWatch = new wxStopWatch();
	stopWatch->Pause();

	keyboardMapping['A'] = KEY_A;
	keyboardMapping['B'] = KEY_B;
	keyboardMapping['C'] = KEY_C;
	keyboardMapping['D'] = KEY_D;
	keyboardMapping['E'] = KEY_E;
	keyboardMapping['F'] = KEY_F;
	keyboardMapping['G'] = KEY_G;
	keyboardMapping['H'] = KEY_H;
	keyboardMapping['I'] = KEY_I;
	keyboardMapping['J'] = KEY_J;
	keyboardMapping['K'] = KEY_K;
	keyboardMapping['L'] = KEY_L;
	keyboardMapping['M'] = KEY_M;
	keyboardMapping['N'] = KEY_N;
	keyboardMapping['O'] = KEY_O;
	keyboardMapping['P'] = KEY_P;
	keyboardMapping['Q'] = KEY_Q;
	keyboardMapping['R'] = KEY_R;
	keyboardMapping['S'] = KEY_S;
	keyboardMapping['T'] = KEY_T;
	keyboardMapping['U'] = KEY_U;
	keyboardMapping['V'] = KEY_V;
	keyboardMapping['W'] = KEY_W;
	keyboardMapping['X'] = KEY_X;
	keyboardMapping['Y'] = KEY_Y;
	keyboardMapping['Z'] = KEY_Z;
	keyboardMapping[WXK_RETURN] = KEY_ENTER;
	keyboardMapping[WXK_SPACE] = KEY_SPACE;
	keyboardMapping[WXK_NUMPAD0] = KEY_0;
	keyboardMapping[WXK_NUMPAD1] = KEY_1;
	keyboardMapping[WXK_NUMPAD2] = KEY_2;
	keyboardMapping[WXK_NUMPAD3] = KEY_3;
	keyboardMapping[WXK_NUMPAD4] = KEY_4;
	keyboardMapping[WXK_NUMPAD5] = KEY_5;
	keyboardMapping[WXK_NUMPAD6] = KEY_6;
	keyboardMapping[WXK_NUMPAD7] = KEY_7;
	keyboardMapping[WXK_NUMPAD8] = KEY_8;
	keyboardMapping[WXK_NUMPAD9] = KEY_9;
	keyboardMapping[WXK_SHIFT] = KEY_CAPS_SHIFT;
	keyboardMapping[WXK_CONTROL] = KEY_SYMBOL_SHIFT;
}

bool Emulator::isRunning()
{
	return running;
}

Machine *Emulator::getMachine() const
{
    return machine;
}

void Emulator::start()
{
	if (!running) {
		running = true;

		timer->Start(20);
		stopWatch->Resume();
		debugger->uiUpdate();
		printf("start\n");
	}
}

void Emulator::stop()
{
	if (running) {
		running = false;

		timer->Stop();
		stopWatch->Pause();
		debugger->uiUpdate();
		printf("stop\n");
	}
}

BEGIN_EVENT_TABLE(Emulator, wxFrame)
	// begin wxGlade: Emulator::event_table
	EVT_MENU(1, Emulator::OnMachineStart)
	EVT_MENU(2, Emulator::OnMachineStop)
	EVT_MENU(7, Emulator::OnMachineReset)
	EVT_MENU(8, Emulator::OnMachineDebug)
	EVT_MENU(3, Emulator::OnTapeOpen)
	EVT_MENU(4, Emulator::OnTapePlay)
	EVT_MENU(5, Emulator::OnTapeStop)
	EVT_MENU(6, Emulator::OnTapeRewind)
	// end wxGlade
END_EVENT_TABLE();


void Emulator::OnMachineStart(wxCommandEvent &event)
{
	start();
}

void Emulator::OnMachineStop(wxCommandEvent &event)
{
	stop();
}

void Emulator::OnMachineReset(wxCommandEvent & event)
{
	//cpu->setNmiLineState(nmi = !nmi);
	//printf("%d\n", nmi);
	cpu->reset();
}

void Emulator::OnMachineDebug(wxCommandEvent & event)
{
	debugger->uiShowMain();
}

void Emulator::OnTapeOpen(wxCommandEvent & event)
{

}

void Emulator::OnTapePlay(wxCommandEvent & event)
{
	tapeRecorder->play();
}

void Emulator::OnTapeStop(wxCommandEvent & event)
{
	tapeRecorder->stop();
}

void Emulator::OnTapeRewind(wxCommandEvent & event)
{
	tapeRecorder->rewind();
}

void Emulator::OnTimer(wxCommandEvent &event)
{
	do {
		machine->step();
	} while (machine->getCurrentTime() < ((stopWatch->Time() / 1000.0) * machine->getCpuFreq()));

	//Refresh();
	panel->Refresh();
}

void Emulator::OnPaint(wxPaintEvent &event)
{
	//printf("paint\n");
	wxImage img(352, 288);
	//wxPaintDC dc(this);
	wxPaintDC dc2(panel);

	uint32_t *buffer;
	buffer = new uint32_t[352*288];

	if (ula != NULL) {
		ula->renderScreen(buffer);
	}

	for (int y = 0; y < 288; y++) {
		for (int x = 0; x < 352; x++) {
			img.SetRGB(x, y,
					(buffer[y*352 + x] & 0xff0000) >> 16,
					(buffer[y*352 + x] & 0x00ff00) >> 8,
					(buffer[y*352 + x] & 0x0000ff));
		}
	}

	//dc.DrawBitmap(img, wxPoint(0,0));
	dc2.DrawBitmap(img, wxPoint(0,0));
	delete buffer;
}

void Emulator::OnKeyDown(wxKeyEvent &event) {
	int keyCode = event.GetKeyCode();
	printf("pressed = %c (%d)\n", keyCode, keyCode);
	std::map<int, KeyboardKeys>::iterator it = keyboardMapping.find(keyCode);
	if (it != keyboardMapping.end()) {
		keyboard->keyPressed(it->second);
	}
}

void Emulator::OnKeyUp(wxKeyEvent &event) {
	int keyCode = event.GetKeyCode();
	printf("released = %c (%d)\n", keyCode, keyCode);
	std::map<int, KeyboardKeys>::iterator it = keyboardMapping.find(keyCode);
	if (it != keyboardMapping.end()) {
		keyboard->keyReleased(it->second);
	}
}

// wxGlade: add Emulator event handlers


void Emulator::set_properties()
{
	// begin wxGlade: Emulator::set_properties
	SetTitle(wxT("Emulator"));
	SetSize(wxSize(352, 310));
	SetFocus();
	panel->SetMinSize(wxSize(352, 288));
	panel->SetFocus();
	// end wxGlade
}


void Emulator::do_layout()
{
	// begin wxGlade: Emulator::do_layout
	wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
	sizer->Add(panel, 1, wxEXPAND, 0);
	SetSizer(sizer);
	Layout();
	// end wxGlade
}



