// -*- C++ -*- generated by wxGlade HG on Sun Feb 19 19:08:09 2012

#include "DebuggerCodeGui.h"

// begin wxGlade: ::extracode

// end wxGlade


DebuggerCodeGui::DebuggerCodeGui(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
	wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
	// begin wxGlade: DebuggerCodeGui::DebuggerCodeGui
	code_grid = new wxGrid(this, wxID_ANY);
	code_slider = new wxSlider(this, wxID_ANY, 0, 0, 65535, wxDefaultPosition, wxDefaultSize, wxSL_VERTICAL|wxSL_LEFT|wxSL_TOP);

	set_properties();
	do_layout();
	// end wxGlade

	address = 0;
}


BEGIN_EVENT_TABLE(DebuggerCodeGui, wxPanel)
	// begin wxGlade: DebuggerCodeGui::event_table
	EVT_GRID_CMD_SELECT_CELL(wxID_ANY, DebuggerCodeGui::OnSelectCell)
	EVT_COMMAND_SCROLL_ENDSCROLL(wxID_ANY, DebuggerCodeGui::OnCodeSliderEndScroll)
	EVT_COMMAND_SCROLL_THUMBTRACK(wxID_ANY, DebuggerCodeGui::OnCodeSliderEndScroll)
	// end wxGlade
END_EVENT_TABLE();


void DebuggerCodeGui::OnSelectCell(wxGridEvent &event)
{
	printf("%d\n", event.GetRow());
	//code_grid->SelectRow(event.GetRow());
	if (!event.IsSelection()) {
		code_grid->SelectRow(event.GetRow());
	}
	event.Skip();
}

void DebuggerCodeGui::OnCodeSliderEndScroll(wxScrollEvent &event)
{
	address = code_slider->GetValue();
	uiUpdate();
}

// wxGlade: add DebuggerCodeGui event handlers

void DebuggerCodeGui::setDebugger(Debugger *debugger)
{
    this->debugger = debugger;
}

void DebuggerCodeGui::uiUpdate()
{
	code_slider->SetValue(address);

	char buf[1024];
	int dummy;
	int addr = address;

	int len;
	code_grid->DeleteRows(0, code_grid->GetRows());
	code_grid->AppendRows(65536);
	addressRowMap.clear();

	int i = 0;
	for (int addr = 0; addr < 65536; addr += len) {
		addressRowMap[addr] = i;

		len = debugger->dasm(buf, 1024, 0, &dummy, &dummy, addr);

		code_grid->SetCellValue(i, 0, wxString::Format(wxT("%04X"), addr));

		wxString dataStr;
		for (int j = 0; j < len; j++) {
			dataStr.Append(wxString::Format(wxT("%02X"), debugger->getEmulator()->getMachine()->getMemory()->rawRead(addr + j)));
			if (j < len - 1) {
				dataStr.Append(wxT(" "));
			}
		}
		code_grid->SetCellValue(i, 1, dataStr);

		code_grid->SetCellValue(i, 2, wxString::Format(wxT("%s"), wxString::From8BitData(buf).c_str()));
		i++;
	}
	code_grid->DeleteRows(i, code_grid->GetRows() - i);
}

void DebuggerCodeGui::gotoAddress(int address)
{
	int row = (*addressRowMap.lower_bound(address)).second;
	printf("address %d => row = %d\n", address, row);
	code_grid->SelectRow(row, false);
	code_grid->MakeCellVisible(row, 0);
}

void DebuggerCodeGui::set_properties()
{
	// begin wxGlade: DebuggerCodeGui::set_properties
	code_grid->CreateGrid(16, 3);
	code_grid->SetRowLabelSize(0);
	code_grid->EnableGridLines(false);
	code_grid->EnableDragColSize(false);
	code_grid->EnableDragRowSize(false);
	code_grid->SetSelectionMode(wxGrid::wxGridSelectRows);
	code_grid->SetColLabelValue(0, wxT("Address"));
	code_grid->SetColSize(0, 70);
	code_grid->SetColLabelValue(1, wxT("Data"));
	code_grid->SetColSize(1, 100);
	code_grid->SetColLabelValue(2, wxT("Instruction"));
	code_grid->SetColSize(2, 200);
	// end wxGlade

	wxGridCellAttr *addressColAttr = code_grid->GetOrCreateCellAttr(0, 0);
	wxGridCellAttr *dataColAttr = code_grid->GetOrCreateCellAttr(0, 1);
	wxGridCellAttr *codeColAttr = code_grid->GetOrCreateCellAttr(0, 2);

	addressColAttr->SetReadOnly(true);
	codeColAttr->SetReadOnly(true);

	code_grid->SetColAttr(0, addressColAttr);
	code_grid->SetColAttr(1, dataColAttr);
	code_grid->SetColAttr(2, codeColAttr);

	code_grid->SetCellHighlightPenWidth(0);
	code_grid->SetCellHighlightROPenWidth(0);

	code_grid->SetScrollLineY(code_grid->GetRowHeight(0));
}


void DebuggerCodeGui::do_layout()
{
	// begin wxGlade: DebuggerCodeGui::do_layout
	wxBoxSizer* code_sizer = new wxBoxSizer(wxHORIZONTAL);
	code_sizer->Add(code_grid, 2, wxEXPAND|wxADJUST_MINSIZE, 0);
	code_sizer->Add(code_slider, 0, wxEXPAND, 0);
	SetSizer(code_sizer);
	code_sizer->Fit(this);
	// end wxGlade
}

